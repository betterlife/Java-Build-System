<project default="help" basedir=".">

    <property name="tools" location="tools"/>
    <property name="findbugs.home"               location="${tools}/findbugs"/>
    <property name="cobertura.home"              location="${tools}/cobertura-1.9"/>
    <property name="common.lib.dir"              location="${tools}/lib"/>

    <property name="target"                      location="target"/>

    <property name="build.production.src"        location="src"/>
    <property name="build.test.src"              location="test/src"/>
    <property name="build.test.data"             location="test/data"/> 

    <property name="build.production.classes"    location="${target}/classes/production"/>
    <property name="build.test.classes"          location="${target}/classes/test"/>
    <property name="build.test.tmp"              location="${target}/tmp"/>
    <property name="build.instrument.classes"    location="${target}/classes/instrument"/>

    <property name="data"                        location="${target}/data"/>
    <property name="reports.junit.data"          location="${data}/junit"/>
    <property name="reports.codeCoverage.data"   location="${data}/codeCoverage"/>
    <property name="reports.findbugs.data"       location="${data}/findbugs"/>

    <property name="reports"                     location="${target}/reports"/>
    <property name="reports.junit.report"        location="${reports}/junit"/>
    <property name="reports.codeCoverage.report" location="${reports}/codeCoverage"/>
    <property name="reports.findbugs.report"     location="${reports}/findbugs"/>

    <property name="docs"                        location="${target}/docs"/>
    <property name="docs.javadoc"                location="${docs}/javadoc"/>

    <path id="cobertura.classpath">
        <fileset dir="${cobertura.home}">
            <include name="cobertura.jar" />
            <include name="lib/**/*.jar" />
        </fileset>
    </path>

    <path id="common.classpath">
        <fileset dir="${common.lib.dir}">
            <include name="*.jar"/> 
        </fileset>
    </path>

    <path id="findbugs.classpath">
        <fileset dir="${findbugs.home}">
            <include name="lib/*.jar"/> 
        </fileset>
    </path>

    <taskdef 
        name="findbugs"
        classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
        classpathref="findbugs.classpath">
    </taskdef>

    <taskdef
        resource="tasks.properties"
        classpathref="cobertura.classpath"/>

    <target name="help">
        <echo>--------------- Usage for this build system -------------</echo>
        <echo>[ant help] display help information(you are actually doing this now)</echo> 
        <echo>[ant compile] compile the source code</echo> 
        <echo>[ant junit:compile] compile test cases</echo> 
        <echo>[ant junit:run] run test cases</echo>
        <echo>[ant junit:report] generate junit reports</echo>
        <echo>[ant codeCoverage:instrument] generate code coverage instrument classes</echo>
        <echo>[ant codeCoverage:report] generate code coverage report</echo>
        <echo>[ant findbugs] invoke find bugs and generate corresponding report</echo>
        <echo>[ant reportall] generate reports including code coverage, unit test and find bug</echo>
        <echo>[ant docs:javadoc] generate javadoc for the source code</echo>
        <echo>[ant tags] generate ctags and cscope tags for the source code</echo>
        <echo>[ant clean] clean target files, including generated reports!</echo>
        <echo></echo>
        <echo>Note: Default target is help</echo>
        <echo>----------------------- End of usage ---------------------</echo>
        <echo>Author: Xiangqian.Liu&lt;smartlitchi@gmail.com&gt;</echo>
        <echo>You may dispatch and modify this build system for free</echo>
    </target>
    <target name="compile">
        <mkdir dir="${build.production.classes}"/>
        <javac
            srcdir="${build.production.src}"
            destdir="${build.production.classes}"
            source="1.4"
            debug="true"
            encoding="UTF-8"
            target="1.4">
            <include name="**/*.java"/>
            <classpath>
                <path refid="common.classpath"/>
            </classpath>
        </javac>
    </target>


    <target name="codeCoverage:instrument" depends="compile">
        <mkdir dir="${build.instrument.classes}"/>
        <mkdir dir="${reports.codeCoverage.data}"/>
        <cobertura-instrument 
            todir="${build.instrument.classes}"
            datafile="${reports.codeCoverage.data}/metadata.ser">
            <fileset dir="${build.production.classes}"/>
        </cobertura-instrument>
    </target>

    <target name="codeCoverage:report" 
        depends="codeCoverage:instrument, junit:run">
        <mkdir dir="${reports.codeCoverage.report}"/>
        <cobertura-report 
            format   = "html"
            datafile = "${reports.codeCoverage.data}/metadata.ser"
            destdir  = "${reports.codeCoverage.report}"
            srcdir   = "${build.production.src}"/>
    </target>

    <target name="junit:compile" depends="compile">
        <mkdir dir="${build.test.classes}"/>
        <mkdir dir="${build.test.tmp}"/>
        <javac
            srcdir   = "${build.test.src}"
            destdir  = "${build.test.classes}"
            debug    = "true"
            source   = "1.4"
            encoding = "UTF-8"
            target   = "1.4">
            <include name="**/*.java"/>
            <classpath>
                <pathelement location="${build.production.classes}"/>
                <path refid="common.classpath"/>
            </classpath>
        </javac>
    </target>

    <target name="junit:run" depends="junit:compile">
        <mkdir dir="${reports.junit.data}"/>
        <!--
        It is important to set fork="true" because of the way Cobertura works. 
        It only flushes its changes to the coverage data file to disk when the 
        JVM exits. If JUnit runs in the same JVM as ant, then the coverage data 
        file will be updated AFTER ant exits, but you want to run cobertura-report 
        BEFORE ant exits.
        -->
        <junit printsummary="false" 
            forkmode="perBatch" 
            fork="true"
            haltonfailure="false">
            <!--
            Specify the name of the coverage data file to use.
            The value specified below is the default.
            -->
            <sysproperty 
                key="net.sourceforge.cobertura.datafile"
                file="${reports.codeCoverage.data}/metadata.ser" />
            <!--
            Note the classpath order: instrumented classes are before the
            original (uninstrumented) classes. This is important.
            -->
            <classpath>
                <pathelement location="${build.instrument.classes}"/>
                <pathelement location="${build.test.classes}"/>
                <pathelement location="${build.production.classes}"/>
                <path        refid="cobertura.classpath"/>
                <path        refid="common.classpath"/>
            </classpath>
            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>
            <batchtest fork="yes"   todir="${reports.junit.data}">
                <fileset dir="${build.test.classes}">
                    <include name="**/*Test*.class"/>
                    <exclude name="**/AllTests.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    <target name="junit:report" depends="junit:run">
        <mkdir dir="${reports.junit.report}"/>
        <junitreport todir="${reports.junit.report}">
            <fileset dir="${reports.junit.data}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.junit.report}"/>
        </junitreport>
    </target>
    <target name="findbugs" depends="compile">
        <mkdir dir="${reports.findbugs.report}"/>

        <findbugs home="${findbugs.home}"
            output="html"
            outputFile="${reports.findbugs.report}/index.htm" >
            <systemProperty name = "findbugs.home"
                value= "${findbugs.home}"/>
            <sourcePath path="${build.production.src}"/>
            <class  location="${build.production.classes}"/>
        </findbugs>
    </target>

    <target name="reportall" depends="codeCoverage:report,junit:report,findbugs">
    </target>

    <target name="docs:javadoc">
        <mkdir dir="${docs.javadoc}"/>
        <echo>generating java doc</echo>
        <javadoc
            destdir="${docs.javadoc}"
            author="true"
            version="true"
            use="true"
            failonerror="false"
            encoding="UTF8"
            docencoding="UTF-8">
            <fileset dir="${build.production.src}" defaultexcludes="yes">
                <include name="**"/>
            </fileset>
        </javadoc>

    </target>

    <target name="tags">
        <exec executable="ctags">
            <arg line="--recurse=yes"/>
            <arg line="--links=yes"/>
            <arg line="--java-types=cimp"/>
            <arg line="--fields=+iaS"/>
            <arg line="--totals=yes"/>
            <arg line="./src"/>
            <arg line="./test/src"/>
        </exec>
        <exec executable="find" output="cscope.files">
            <arg line="."/>
            <arg line="-name"/>
            <arg line="'*.java'"/>
        </exec>
        <exec executable="cscope">
            <arg line=" -b -q -i cscope.files"/>
        </exec>
    </target>

    <target name="clean">
        <delete dir="${target}"/>
    </target>

</project>
